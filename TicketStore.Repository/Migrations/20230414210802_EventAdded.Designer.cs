// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketStore.Repository;

#nullable disable

namespace TicketStore.Repository.Migrations
{
    [DbContext(typeof(TicketStoreContext))]
    [Migration("20230414210802_EventAdded")]
    partial class EventAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DbApplicationRoleDbApplicationUser", b =>
                {
                    b.Property<Guid>("role_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("role_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("application_user_role", (string)null);
                });

            modelBuilder.Entity("TicketStore.Repository.Entities.DbApplicationRole", b =>
                {
                    b.Property<Guid>("ApplicationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("normalized_name");

                    b.HasKey("ApplicationRoleId");

                    b.ToTable("application_role");
                });

            modelBuilder.Entity("TicketStore.Repository.Entities.DbApplicationUser", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fullname");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("application_user");
                });

            modelBuilder.Entity("TicketStore.Repository.Entities.DbEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("title");

                    b.Property<Guid>("venue_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("venue_id");

                    b.ToTable("event");
                });

            modelBuilder.Entity("TicketStore.Repository.Entities.DbVenue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("venue");
                });

            modelBuilder.Entity("DbApplicationRoleDbApplicationUser", b =>
                {
                    b.HasOne("TicketStore.Repository.Entities.DbApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketStore.Repository.Entities.DbApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketStore.Repository.Entities.DbEvent", b =>
                {
                    b.HasOne("TicketStore.Repository.Entities.DbVenue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("venue_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("TicketStore.Repository.Entities.DbVenue", b =>
                {
                    b.OwnsOne("TicketStore.Repository.Entities.DbAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("DbVenueId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address_country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address_street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("varchar(10)")
                                .HasColumnName("address_zip_code");

                            b1.HasKey("DbVenueId");

                            b1.ToTable("venue");

                            b1.WithOwner()
                                .HasForeignKey("DbVenueId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("TicketStore.Repository.Entities.DbVenue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
